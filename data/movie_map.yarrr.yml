prefixes:
  mo: http://semantics.id/ns/example/movie#
  ex: http://semantics.id/ns/example#
  grel: http://users.ugent.be/~bjdmeest/function/grel.ttl# 
  schema: http://schema.org/
  xsd: http://www.w3.org/2001/XMLSchema/

mappings:
  Movie:
    sources:
      - [1000_movies_metadata.csv~csv]
    s: ex:movie_$(id)
    po:
      - [a, mo:Movie]
      - p: mo:isAdultMovie
        o: 
          function: grel:toLowerCase
          parameters:
            - [grel:valueParameter, $(adult)]
          datatype: xsd:boolean

      - p: mo:budget
        o: 
          v: $(budget)
          datatype: xsd:integer
      - p: mo:homepage
        o: 
          v: $(homepage)
          datatype: xsd:anyURI
      - p: mo:id
        o: 
          v: $(id)
          datatype: xsd:string
      - p: mo:hasIMDBResource
        o:
           v:  ex:imdbresource_$(imdb_id) 
           type: iri
      - p: mo:description
        o:    
          v: $(overview)
          language: en
      - p: mo:hasReleaseDate
        o: 
          v: $(release_date) 
          datatype: xsd:date
      - p: mo:revenue
        o: 
          v: $(revenue) 
          datatype: xsd:integer
      - p: mo:runtime
        o: 
          v: $(runtime) 
          datatype: xsd:integer
      - p: mo:tagline
        o: 
          v: $(tagline) 
          datatype: xsd:string
      - p: mo:hasName
        o: 
          v: $(title) 
          datatype: xsd:string

  MovieKeywords:
    # scripts/split_keywords.py preprocesses cleaning 1000_keywords.csv
    sources:
      - [fixed_1000_keywords.csv~csv]
    s: ex:movie_$(id)
    po:
      - p: mo:keyword
        o: $(keyword)

  IMDBResource:
    sources:
      - [1000_links.csv~csv]
    s: ex:imdbresource_tt$(imdbId)
    po: 
      - [a, mo:IMDBResource]
      - p: mo:url
        o: 
          v: $(imdb_url)
          datatype: xsd:string    
      - p: mo:id
        o: 
          v: $(imdbId)
          datatype: xsd:string

# IMDBResource_vote Note:
# instances that only exist in this resource here wont have
# mo:id (todo) or mo:url 
  IMDBResource_vote:  
    sources:
      - [1000_movies_metadata.csv~csv]
    s: ex:imdbresource_$(imdb_id)
    po: 
      - [a, mo:IMDBResource]
      - p: mo:vote_average
        o:
          v: $(vote_average)
          datatype: xsd:float
      - p: mo:vote_count
        o:
          v: $(vote_count)
          datatype: xsd:integer

  Movie_json:
    sources:
      - [1000_movies_metadata.json~jsonpath, "$[*]"]
    s: ex:movie_$(id)
    po:
      - [a, mo:Movie]
      - p: mo:originalTitle
        o:
          v: $(original_title)
          datatype: xsd:string
      - p: mo:hasProductionCountry
        o:
          v: $(.production_countries[*].iso_3166_1)
      - p: mo:hasSpokenLanguage
        o:
          v: $(.spoken_languages[*].iso_639_1)
      - p: mo:hasFilmStudio
        o:
          v: ex:filmstudio_$(.production_companies[*].id)
          type: iri   # this is a much simpler way to link entities
      - p: mo:hasGenre
        o:
          v: ex:genre_$(.genres[*].id)
          type: iri

  Movie_json_FilmStudio:
    sources:
      - [1000_movies_metadata.json~jsonpath, "$[*].production_companies[*]"]
    s: ex:filmstudio_$(.id)
    po:
      - [a, mo:FilmStudio]
      - p: mo:hasName
        o:
          v: $(.name)
      - p: mo:id
        o:
          v: $(.id)
          datatype: xsd:integer

  Movie_json_Genre:
    sources:
      - [1000_movies_metadata.json~jsonpath, "$[*].genres[*]"]
    s: ex:genre_$(.id)
    po:
      - [a, mo:Genre]
      - p: mo:hasName
        o:
          v: $(.name)
      - p: mo:id
        o:
          v: $(.id)
          datatype: xsd:integer

  Movie_hasCast:
    sources:
      - [1000_credits.json~jsonpath, "$[*]"]
    s: ex:movie_$(id)
    po:
      - [a, mo:Movie]
      - p: mo:hasCast
        o:
          v: ex:cast_$(.cast[*].credit_id)
          type: iri
  
  Cast:
    sources:
      - [1000_credits.json~jsonpath, "$[*].cast[*]"]
    s: ex:cast_$(.credit_id)
    po:
      - [a, mo:Cast]
      - p: mo:hasCastCharacter
        o:
          v: $(.character)
      - p: mo:hasActor 
        o:
          v: ex:actor_$(.name)
          type: iri

  Actor:
    sources:
      - [1000_credits.json~jsonpath, "$[*].cast[*]"]
    s: ex:actor_$(.name)
    po:
      - [a, mo:Actor]
      - p: mo:hasName
        o:
          v: $(.name)
      - p: mo:hasGender
        o: "unknown"
        condition:
          function: equal
          parameters:
            - [str1, $(.gender)]
            - [str2, "0"]  
      - p: mo:hasGender
        o: "female"
        condition:
          function: equal
          parameters:
            - [str1, $(.gender)]
            - [str2, "1"]  
      - p: mo:hasGender
        o: "male"
        condition:
          function: equal
          parameters:
            - [str1, $(.gender)]
            - [str2, "2"]  


  Movie_hasMovieDirector:
    sources:
      - [1000_credits.json~jsonpath, "$[*]"]
    s: ex:movie_$(id)    
    po:
      - [a, mo:Movie]
      - p: mo:hasMovieDirector
        o:
          v: ex:director_$(.crew[*].name)
          type: iri
        condition:
          function: equal
          parameters:
            - 
              - str1
              - $(.crew[*].job)
            - [str2, "Director"]  


  Director:
    sources:
      - [1000_credits.json~jsonpath, "$[*].crew[*]"]
    s: ex:director_$(.name)
    condition:
      function: equal
      parameters:
        - [str1, $(.job)]
        - [str2, "Director"]    
    po:
      - [a, mo:MovieDirector]
      - [mo:hasName, $(.name)]
      - p: mo:job
        o: $(.job)


      # - p: mo:id # change to incoming IRI
      #   o: 
      #     v: $(.cast_id)








