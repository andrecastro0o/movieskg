prefixes:
  mo: http://semantics.id/ns/example/movie#
  ex: http://semantics.id/ns/example#
  grel: http://users.ugent.be/~bjdmeest/function/grel.ttl# 
  schema: http://schema.org/
  xsd: http://www.w3.org/2001/XMLSchema/

mappings:
  Movie:
    sources:
      - [1000_movies_metadata.csv~csv]
    s: ex:movie_$(id)
    po:
      - [a, mo:Movie]
      - p: mo:isAdultMovie
        o: 
          function: grel:toLowerCase
          parameters:
            - [grel:valueParameter, $(adult)]
          datatype: xsd:boolean

      - p: mo:budget
        o: 
          v: $(budget)
          datatype: xsd:integer
      - p: mo:homepage
        o: 
          v: $(homepage)
          datatype: xsd:anyURI
      - p: mo:id
        o: 
          v: $(id)
          datatype: xsd:string
      - p: mo:hasIMDBResource
        o:
          mapping: IMDBResource # IMDBResource $(imdbId) does not have tt prefix 
          condition:
            function: equal
            parameters:
              - [str1, $(imdb_id), s]   ## $(imdb_id) has tt prefix
              - [str2, tt$(imdbId), o]  ## appended prefix tt
      - p: mo:description
        o:    
          v: $(overview)
          language: en
      - p: mo:hasReleaseDate
        o: 
          v: $(release_date) 
          datatype: xsd:date
      - p: mo:revenue
        o: 
          v: $(revenue) 
          datatype: xsd:integer
      - p: mo:runtime
        o: 
          v: $(runtime) 
          datatype: xsd:integer
      - p: mo:tagline
        o: 
          v: $(tagline) 
          datatype: xsd:string
      - p: mo:hasName
        o: 
          v: $(title) 
          datatype: xsd:string
  IMDBResource:
    sources:
      - [1000_links.csv~csv]
    s: ex:imdbresource_tt$(imdbId)
    po: 
      - [a, mo:IMDBResource]
      - p: mo:url
        o: 
          v: $(imdb_url)
          datatype: xsd:string    
      - p: mo:id
        o: 
          v: $(imdbId)
          datatype: xsd:string
  IMDBResource_vote:
    sources:
      - [1000_movies_metadata.csv~csv]
    s: ex:imdbresource_$(imdb_id)
    po:    
      - p: mo:vote_average
        o:
          v: $(vote_average)
          datatype: xsd:float
      - p: mo:vote_count
        o:
          v: $(vote_count)
          datatype: xsd:integer
  Movie_json:
    sources:
      - [1000_movies_metadata.json~jsonpath, "$[*]"]
    s: ex:movie_$(id)
    po:
      - [a, mo:Movie]
      - p: mo:originalTitle
        o:
          v: $(original_title)
          datatype: xsd:string
      - p: mo:hasProductionCountry
        o:
          v: $(.production_countries[*].iso_3166_1)
      - p: mo:hasSpokenLanguage
        o:
          v: $(.spoken_languages[*].iso_639_1)
      - p: mo:hasFilmStudio
        o:
          v: ex:filmstudio_$(.production_companies[*].id)
          type: iri   # this is a much simpler way to link entities
  Movie_json_FilmStudio:
    sources:
      - [1000_movies_metadata.json~jsonpath, "$[*].production_companies[*]"]
    s: ex:filmstudio_$(.id)
    po:
      - [a, mo:FilmStudio]
      - p: mo:hasName
        o:
          v: $(.name)
      - p: mo:id
        o:
          v: $(.id)
          datatype: xsd:string






# sources:  
#   Movie_json:
#     access: 1000_movies_metadata.json
#     referenceFormulation: jsonpath
#     iterator: $ # [*]genres[*]
# mappings:
#   movie:
#       sources: Movie_json
#       s: ex_TEST_$(id)
#       po: 
#         - [a, mo:TEST_name]


#     # sources:
#     #   - [1000_movies_metadata.json~jsonpath, "$[*]"]
#     # s: ex_TEST_$(original_title)
#     # po: 
#     #   - [a, mo:TEST]
#     #   - [mo:title, $(original_title) ]
